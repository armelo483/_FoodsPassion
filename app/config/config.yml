imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@PanierEcommerceBundle/Resources/config/services.yml" }
    #- { resource: "@EcommerceBundle/Resources/config/services.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr

#httplug:
 #   clients:
  #      default:
   #         factory: 'httplug.factory.curl'
    #    hwi_special:
     #       factory: 'httplug.factory.guzzle6'
      #      config: # You pass here the Guzzle configuration, exactly like before.
       #         timeout: 10
        #        verify: false
         #       max_redirects: 1
          #      ignore_errors: false
                #proxy: "example.com:8080"

vich_uploader:
    db_driver: orm
    mappings:
        product_images:
            uri_prefix:         '%app.path.product_images%'
            upload_destination: '%kernel.project_dir%/publics%app.path.product_images%'
            namer: vich_uploader.namer_uniqid

sensio_framework_extra:
    router:
        annotations: false
    request: { converters: true }
    view: { annotations: true }

#hwi_oauth:
 #   connect:
  #      confirmation: true
   #     registration_form: fos_user.registration.form.factory
    # list of names of the firewalls in which this bundle is active, this setting MUST be set
    #firewall_names: [main]
    #http:
       # client: httplug.client.hwi_special
    #fosub:
     #   username_iterations: 30
      #  properties:
       #     facebook: facebookID
    #resource_owners:
     #   facebook:
      #      type:                facebook
       #     client_id:           255167288701192
        #    client_secret:       276c991b36936160b6cdd8f6ead575e3
         #   scope:               "email"
          #  infos_url:     "https://graph.facebook.com/me?fields=id,name,email"
           # options:
            #    csrf: true


easy_admin:
    site_name: 'City Cosmetics'
    design:
        brand_color: '#1ABC9C'
    entities:
        Mets:
            label: 'Articles'
            list:
                title: "Liste des article City Cosmetics en vente"
                fields:
                #- { property: 'imageUrl',  type: 'image', base_path: '%kernel.root_dir%/publics%app.path.product_images%'}
                - { property: 'libelle', type: 'string'}
                - { property: 'description', type: 'text'}
                - { property: 'prix', type: 'decimal'}

            form:
                fields:
                - { property: 'libelle', type: 'text'}
                - { property: 'description', type: 'textarea'}
                - { property: 'prix', type: 'number'}
                - { property: 'imageFile', type: 'vich_image', base_path: '%app.path.product_images%'}
            show:
                fields:
                - { property: 'imageUrl', type: 'image', base_path: '%app.path.product_images%' }

            class: AppBundle\Entity\Mets

        User:
            list:
                fields:
                - { property: 'image', type: 'image', base_path: '%app.path.product_images%' }
            class: AppBundle\Entity\User


        Commande:
            label: 'Commandes'
            list:
                title: "Liste des commandes et leurs statuts"
                fields:
                    #- { property: 'imageUrl',  type: 'image', base_path: '%kernel.root_dir%/publics%app.path.product_images%'}
                    - { property: 'id', type: 'string'}
                    - { property: 'owner', type: 'string'}
                    - { property: 'tel', type: 'string'}
                    - { property: 'status', type: 'string'}

            form:
                fields:
                    - { property: 'owner', type: 'string'}
                    - { property: 'id', type: 'string'}
                    - { property: 'tel', type: 'string'}
                    - { property: 'status', type: 'string'}
            show:
                fields:
                    - { property: 'owner', type: 'string'}
                    - { property: 'tel', type: 'string'}
                    - { property: 'status', type: 'string'}

            class: Panier\EcommerceBundle\Entity\Commande

framework:
    #esi: ~
    translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    serializer: { enable_annotations: true }

    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true
    templating:
        engines: ['twig', 'php']

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    paths:
        '%kernel.project_dir%/src/panier/ecommercebundle/resources/views/panier': paniers

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        types:
            uuid:  Ramsey\Uuid\Doctrine\UuidType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }




# app/config/config.yml
fos_user:
    db_driver: orm # other valid values are 'mongodb' and 'couchdb'
    firewall_name: main
    user_class: AppBundle\Entity\User
    registration:
        confirmation:
            enabled: true
            from_email:
                address: "%mailer_user%"
                sender_name: 'Equipe Black Angel'
        form:
            type: AppBundle\Form\RegistrationType
    from_email:
        address: "%mailer_user%"
        sender_name: "%mailer_user%"

# config/packages/nelmio_api_doc.yaml
nelmio_api_doc:
    areas:
        path_patterns: # an array of regexps
            - ^/api(?!/doc$)
        host_patterns:
            - ^api\.


